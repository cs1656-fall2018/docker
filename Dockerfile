FROM continuumio/anaconda3
MAINTAINER Evangelos Karageorgos <karageorgos@pitt.edu>

# --------------- basic configuration --------------
ENV JAVA_HOME /usr
RUN apt update -y \
    && apt install -y apt-transport-https ca-certificates curl software-properties-common \
    && apt install -y default-jre-headless php7.0 php7.0-mysql libapache2-mod-php apache2 wget unzip \
    && apt install -y apt-utils dos2unix openssh-client debconf-utils

# ----------------- MySql (MariaDB) ----------------
RUN { \
        echo debconf debconf/frontend select Noninteractive; \
        echo mysql-server mysql-server/root_password password 'root'; \
        echo mysql-server mysql-server/root_password_again password 'root'; \
    } | debconf-set-selections \
    && apt install -y mysql-server
RUN sed -i "s|bind-address|#bind-address |g" /etc/mysql/mariadb.conf.d/50-server.cnf
RUN sed -i '/skip-external-locking/a default-time-zone="-5:00"' /etc/mysql/mariadb.conf.d/50-server.cnf

# --------------------- MongoDB --------------------
RUN apt-get update && apt-get install -my wget gnupg
RUN apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv 2930ADAE8CAF5059EE73BB4B58712A2291FA4AD5
RUN echo "deb http://repo.mongodb.org/apt/debian stretch/mongodb-org/3.6 main" | tee /etc/apt/sources.list.d/mongodb-org-3.6.list
RUN apt update -y && apt install -y mongodb-org

# ---------------------- Neo4J ---------------------
RUN mkdir -p /data/db
RUN wget -O - https://debian.neo4j.org/neotechnology.gpg.key | apt-key add -
RUN echo 'deb https://debian.neo4j.org/repo stable/' | tee -a /etc/apt/sources.list.d/neo4j.list
RUN apt-get update
RUN apt-get -y install neo4j=1:3.4.0
RUN sed -i "s|#dbms.active_database=graph.db|dbms.active_database=cineasts_12k_movies_50k_actors.db |g" /etc/neo4j/neo4j.conf
RUN sed -i "s|#dbms.allow_upgrade=true|dbms.allow_upgrade=true |g" /etc/neo4j/neo4j.conf
RUN sed -i "s|#dbms.security.auth_enabled=false|dbms.security.auth_enabled=false |g" /etc/neo4j/neo4j.conf
RUN sed -i "s|#dbms.connectors.default_listen_address=0.0.0.0|dbms.connectors.default_listen_address=0.0.0.0 |g" /etc/neo4j/neo4j.conf

# ----------------- Build essentials ---------------
RUN apt-get -y install nano
RUN pip install --upgrade pip
RUN apt-get -y install build-essential

# -------------------- sqlite-web ------------------
RUN apt-get install libsqlite3-dev
RUN pip install sqlite-web
RUN { \
        echo '#!/bin/bash'; \
        echo 'sqlite_web -p 8484 -H 0.0.0.0 $1'; \
    } | tee "/usr/bin/sqlite-view"
RUN chmod +x /usr/bin/sqlite-view

# --------------------- cubes ----------------------
RUN pip install configparser
RUN pip install cubes[all]

# -------------------- Jupyter ---------------------
RUN jupyter notebook --generate-config
RUN sed -i "s|#c.NotebookApp.allow_root = False|c.NotebookApp.allow_root = True |g" /root/.jupyter/jupyter_notebook_config.py
RUN sed -i "s|#c.NotebookApp.open_browser = True|c.NotebookApp.open_browser = False |g" /root/.jupyter/jupyter_notebook_config.py
RUN sed -i "s|#c.NotebookApp.allow_origin = ''|c.NotebookApp.allow_origin = '*' |g" /root/.jupyter/jupyter_notebook_config.py
RUN sed -i "s|#c.NotebookApp.ip = 'localhost'|c.NotebookApp.ip = '*' |g" /root/.jupyter/jupyter_notebook_config.py
RUN sed -i "s|#c.NotebookApp.disable_check_xsrf = False|c.NotebookApp.disable_check_xsrf = True |g" /root/.jupyter/jupyter_notebook_config.py
RUN sed -i "s|#c.NotebookApp.token = '<generated>'|c.NotebookApp.token = '' |g" /root/.jupyter/jupyter_notebook_config.py

# ---------------- XeTeX for jupyter ---------------
RUN apt-get -y install texlive-xetex

# ------------------- PHPMyAdmin -------------------
RUN export DEBIAN_FRONTEND=noninteractive && \
	apt-get -yq install phpmyadmin
RUN find /var/lib/mysql -type f -exec touch {} \; && service mysql start && \
	mysql -u root -proot -e "GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION; FLUSH PRIVILEGES;" && \
	mysql -u root -proot -e "CREATE USER 'phpmyadmin'@'localhost' IDENTIFIED BY 'pass';GRANT ALL PRIVILEGES ON *.* TO 'phpmyadmin'@'localhost' WITH GRANT OPTION;GRANT SHOW DATABASES ON *.* TO 'phpmyadmin'@'localhost' WITH GRANT OPTION;FLUSH PRIVILEGES;"
RUN sed -i "/dbc_dbpass=/c\dbc_dbpass='pass'" /etc/dbconfig-common/phpmyadmin.conf
RUN { \
		echo "<?php"; \
		echo "/*"; \
		echo " * Generated configuration file"; \
		echo " * Generated by: phpMyAdmin 3.3.2 setup script by Piotr Przybylski <piotrprz@gmail.com>"; \
		echo " * Date: Thu, 29 Apr 2010 11:20:23 +0200"; \
		echo " */"; \
		echo "/* Servers configuration */"; \
		echo "\$i = 0;"; \
		echo ""; \
		echo "/* Server: localhost [1] */"; \
		echo "\$i++;\n"; \
		echo "\$cfg['Servers'][\$i]['verbose'] = '';"; \
		echo "\$cfg['Servers'][\$i]['host'] = 'localhost';"; \
		echo "\$cfg['Servers'][\$i]['port'] = '';"; \
		echo "\$cfg['Servers'][\$i]['socket'] = '';"; \
		echo "\$cfg['Servers'][\$i]['connect_type'] = 'tcp';"; \
		echo "\$cfg['Servers'][\$i]['extension'] = 'mysqli';"; \
		echo "\$cfg['Servers'][\$i]['auth_type'] = 'config';"; \
		echo "\$cfg['Servers'][\$i]['user'] = 'phpmyadmin';"; \
		echo "\$cfg['Servers'][\$i]['password'] = 'pass';"; \
		echo "\$cfg['Servers'][\$i]['verbose_check'] = false;"; \
		echo "\$cfg['Servers'][\$i]['only_db'] = '';"; \
		echo "\$cfg['Servers'][\$i]['hide_db'] = '^(mysql|information_schema|performance_schema|phpmyadmin)$';"; \
		echo ""; \
		echo "/* End of servers configuration */"; \
		echo ""; \
		echo "\$cfg['DefaultLang'] = 'en-utf-8';"; \
		echo "\$cfg['ServerDefault'] = 1;"; \
		echo "\$cfg['blowfish_secret'] = '\"4bd94c36753d6ee2.2987282742';"; \
		echo "\$cfg['UploadDir'] = '';"; \
		echo "\$cfg['SaveDir'] = '';"; \
		echo "?>"; \
    } | tee "/etc/phpmyadmin/config.inc.php"
RUN echo 'Include /etc/phpmyadmin/apache.conf' >> /etc/apache2/apache2.conf

# --------------- nodejs + adminMongo --------------
RUN curl -sL https://deb.nodesource.com/setup_10.x | bash - &&\
	apt-get install -y nodejs
RUN cd /var/lib/ &&\
	git clone https://github.com/mrvautin/adminMongo.git && cd adminMongo &&\
	npm install
RUN { \
        echo '{'; \
        echo '  "connections": {'; \
        echo '    "admin": {'; \
        echo '      "connection_string": "mongodb://admin:adminroot@127.0.0.1",'; \
        echo '      "connection_options": {}'; \
        echo '    }'; \
        echo '  }'; \
        echo '}'; \
    } | tee "/var/lib/adminMongo/config/config.json"

RUN mkdir /temp
RUN echo "" > /temp/mongostart.sh
RUN { \
		echo "#!/bin/bash"; \
        echo "nohup mongod --bind_ip 127.0.0.1 --auth --quiet &"; \
        echo "RET=1"; \
        echo "while [[ RET -ne 0 ]]; do"; \
        echo '    echo "=> Waiting for confirmation of MongoDB service startup"'; \
        echo "    sleep 5"; \
        echo '    mongo --eval "help" >/dev/null 2>&1'; \
        echo '    RET=$?'; \
        echo "done"; \
        echo "if [ ! -f /data/db/.mongodb_password_set ]; then"; \
		echo '    mongo admin --eval "db.createUser({user: \"admin\", pwd: \"adminroot\", roles: [ { role: \"userAdminAnyDatabase\", db: \"admin\" } ]  })"'; \
		echo '    mongo -u admin -p 'adminroot' --authenticationDatabase admin admin --eval "db.grantRolesToUser('admin',[{ role: \"root\", db: \"admin\" }])"'; \
        echo "    touch /data/db/.mongodb_password_set"; \
        echo "fi"; \
    } | tee "/temp/mongostart.sh"
RUN chmod +x /temp/mongostart.sh
	
# -------------- actors neo4j database -------------
ADD cineasts_12k_movies_50k_actors.zip /temp/actors.zip
RUN unzip /temp/actors.zip -d /var/lib/neo4j/data/databases/

# ----------------- mysql databases ----------------
ADD wine.sql /temp/wine.sql
ADD northwind.sql /temp/northwind.sql
RUN find /var/lib/mysql -type f -exec touch {} \; && service mysql start && sleep 1 && \
	mysql -u root -p"pass" -e "CREATE DATABASE \`wine\` CHARACTER SET utf8 COLLATE utf8_general_ci;" && \
	mysql -u root -p"pass" "wine" < /temp/wine.sql && \
	mysql -u root -p"pass" -e "CREATE DATABASE \`northwind\` CHARACTER SET utf8 COLLATE utf8_general_ci;" && \
	mysql -u root -p"pass" "northwind" < /temp/northwind.sql

# ---------------- mongodb databases ----------------
ADD wine.mongo /temp/wine.mongo
ADD restaurants.mongo /temp/restaurants.mongo

# -------------------- web page ---------------------
RUN unlink /var/www/html/index.html
ADD website/ /var/www/html/
#RUN unzip /temp/website.zip -d /var/www/html

# -------------- ports amd entry point --------------
ADD entrypoint.sh /temp/entrypoint.sh
RUN chmod +x /temp/entrypoint.sh

EXPOSE 80 7474 7687 8484 8888 3306 1234
CMD ["/temp/entrypoint.sh"]
